~ = name of program

what the TODO and DONE list will look like:
CHARTODO
1. x
2. y
3. z
--
DONE
1. a
2. b
3. c

1. ~ --help
  > show all commands

2. ~ list
  > show the TODO and DONE list

3. ~ add x
  > adds a new TODO to the bottom of the list

4. ~ edit x abc
  > edits a current TODO item. x has to be a position number.
  > abc is what you want the TODO item to be edited to.

5. ~ done x
  > changes a TODO to DONE
  > can either be the full item name of the TODO or its number, eg, 1
  > if neither the item name or the number exist, nothing happens

6. ~ rmtodo x
  > removes a TODO
  > can either be the full name of the TODO or its number, eg, 2
  > if neither the item name or the number exist, nothing happens

7. ~ switchprio x-y
  > switch the positions of TODO items
  > x-y have to be numbers. like x could be 3 and y could 6
  > if the number doesn't exist, nothing happens

8. ~ changeprio x-y
  > change the position of a TODO item from x to y
  > x-y have to be numbers. like x could be 9 and y could 4
  > simple deletion from the original position and insertion

9. ~ cleartodo
  > empties the TODO list

10. ~ rmdone x
  > removes a DONE item
  > can either be the full name of the DONE item or its number, eg, 3
  > if neither the item name or the number exist, nothing happens

11. ~ notdone x
  > undoes a DONE item and puts it back to TODO at the bottom of the list
  > can either be the full name of the DONE item or its number, eg, 4
  > if neither the item name or the number exist, nothing happens

11a. ~ notdone x -prio y
  > this may or may not end up being a thing but i'm putting it here anyway
  > may be the only instance of a multi-command action
  > may not be good practice to have only one
  > like why not do a system where the user can chain together commands and
  > invalid commands are just ignored?
  > sounds too annoying tho, might as well keep it simple for now
  > but this one specifically is a good idea so i'm mentioning it
  > undoes a DONE item and puts it back in TODO at a specific position
  > y is the specific position

12. ~ cleardone
  > empties the DONE list

13. ~ clearall
  > empties both TODO and DONE
  > could just be clear, but added an extra word so that users can't
    accidentally clear both lists

14. ~ addtoplace 'item' 'position'
  > add an item to a specific position

notes:
1. after doing ~ list and ~ add x, it seems clear that the general flow of the functionalities are
  1. read file
  2. if needed, do actions on file, e.g., edit
  3. print

after adding time-based/deadline-based todo items, comfy-table crate might be a good option to show separation of the lists

DEADLINE
1. ~ deadline-add, dl-a new-item 2024-01-01 00:00
  > argument chaining for all of 1s

1a. ~ deadline-addonlydate, dl-aod new-item 2024-01-01
  > adds a new deadline item with only date specified. time defaults to 00:00

1b. ~ deadline-addonlytime, dl-aot new-item 00:00
  > adds a new deadline with only time specified. date defaults to current date

2. ~ deadline-done, dl-d 1 2 3 4 5

3. ~ deadline-rmtodo, dl-rmt 1 2 3 4 5

4. ~ deadline-cleartodo, dl-ct

5. ~ deadline-cleardone, dl-cd

6. ~ deadline-clearall, dl-ca

7. ~ deadline-rmdone, dl-rmd 1 2 3 4

8. ~ deadline-notdone, dl-nd 1 2 3

9. ~ deadline-notdoneall, dl-nda

10. ~ deadline-editall, dl-ea #position 'new-item' 'date' 'time'
  > no argument chaining

10a. ~ deadline-edittask, dl-eta #position 'new-item'

10b. ~ deadline-editdate, dl-ed #position 'date'

10c. ~ deadline-edittime, dl-eti #position 'time'

REPEATING
1. ~ repeating-add | rp-a task interval unit-time
    > chartodo rp-a vacuum-every-month 1 month
    > takes a u32 for interval. max is 4294967296 - 1
    > unit-time is minutes|minute, hours|hour, days|day, weeks|week, months|month, years|year
    note that there is no sense in adding with only certain params, as that just doesn't make sense

2. ~ repeating-editall | rp-ea position task interval unit-time
    > edits all params

2a. ~ repeating-edittask | rp-et position task
    > edits task

2b. ~ repeating-editinterval | rp-ei position interval

2c. ~ repeating-editintervalunit | rp-eiu position unit
    > i'm not too sure about the naming of this. eu or eiu or eti? eiu is prob best

3. ~ repeating-reset | rp-r position
    > the purpose of this is to make a new due date based on the current datetime, and based on the repeat-interval
    and unit
    > its main reasons for existence are a) user wants to reset due date based on their current time for a reason/variety of reasons,
    and b) if it's been a long time, and the user has missed several due dates, then perhaps it's time to reset

all the other commands are the same as deadline's

REPEATING important:
    scenarios:
        1. a user does rp-d on a task. it moves to the done list. the due date has been met. since it is done, it needs to reset.
        the user prints the list. however, it still remains on the done list, is not on the todo list, and thus has not been reset.
            my fix on the problem: create a repeat-done field on the task object that tracks whether or not it's done. when the user
            calls for the list to be printed, then before it's printed, compare the set date + time with the current date + time, and
            whether or not repeat-done was marked as true. if the due date is met and repeat-done is true, then reset the due date based
            on repeat-interval and repeat-unit, e.g., 3 days, write the changes to the file first, and then print
        2. if the user missed several due dates, should I keep track of that? should I just reset if it missed several due-dates?
            should I add a special repeating task that keeps track of missed due dates? future command perhaps?
        3. when editing the interval and unit-time of a repeating task, it is important to keep track of the original datetime, so that the
            new interval and unit-time can be added to it. once a due date has been met and the task is done, then before making a new
            due date, reset the original datetime first to the previous due datetime


questions:
1. should the file containing the lists have `TODO`, `--`, and `DONE` in it too?
  simpler to just print them anytime, altho it might be less resource intensive
  to have bufreader read it line by line and print. even if it is, it's not worth it
  but it's cool to think about.
2. i think the TODO and DONE should be separated by -- in the file. Easier to
  modify it if I know there's a clear demarcation I can check for. As an added bonus,
  also easier for humans to read if they check the file
3. or should TODO and DONE have separate files? I feel like that's easier
3a. TODO and DONE shouldn't have separate files. In the future, I will add the
  ability to have separate TODO+DONE 'categories', like shopping, main/general,
  work, etc., and having only one file each would make things simpler

answers:
1. easiest way: create and delete the same file at every functionality

thoughts on the future:
1. this is very far away, but I'm thinking about having the ability to have separate
  TODO + DONE categories and be able to name each category. Like you could have a
  main category, and another one for school, and another one for work, or shopping,
  etc. This can overcomplicate things though, especially on a CLI interface.
  Still a good chance I'm doing this, but only after I'm done and satisfied with
  the initial state of the program.
1. that is no longer happening
